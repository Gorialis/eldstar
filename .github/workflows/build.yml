name: Compile & package Windows builds

on: [push]

jobs:
  build:
    runs-on: windows-latest
    env:
      CMAKE_GENERATOR: Visual Studio 16 2019

    steps:
      - uses: actions/checkout@v2

      - name: Cache dependencies
        id: cache-dependencies
        uses: actions/cache@v1
        with:
          path: eldstar_server/deps
          key: ${{ runner.os }}-dependencies-${{ hashFiles('eldstar_server/download_deps.ps1') }}-${{ hashFiles('eldstar_server/build_deps.ps1') }}

      - name: Download and build dependencies
        if: steps.cache-dependencies.outputs.cache-hit != 'true'
        shell: pwsh
        run: |
          cd eldstar_server
          .\download_deps.ps1
          .\build_deps.ps1
          cd ..

          Compress-Archive -Path "eldstar_server/deps/*" -DestinationPath "Eldstar_${env:GITHUB_SHA}_WinDepends.zip"
          echo "Compressed dependencies into Eldstar_${env:GITHUB_SHA}_WinDepends.zip"

      - name: Upload dependency artifact
        if: steps.cache-dependencies.outputs.cache-hit != 'true'
        uses: actions/upload-artifact@v2-preview
        with:
          name: Eldstar_${{ github.sha }}_WinDepends
          path: Eldstar_${{ github.sha }}_WinDepends.zip

      - name: Build solution
        shell: pwsh
        run: |
          cd eldstar_server
          .\build.ps1
          cd ..

          Compress-Archive -Path "eldstar_server/dists/*" -DestinationPath "Eldstar_${env:GITHUB_SHA}_WinDebug.zip"
          echo "Compressed debug files into Eldstar_${env:GITHUB_SHA}_WinDebug.zip"

      - name: Upload debug artifact
        uses: actions/upload-artifact@v2-preview
        with:
          name: Eldstar_${{ github.sha }}_WinDebug
          path: Eldstar_${{ github.sha }}_WinDebug.zip

      - name: Package 32-bit distribution
        shell: pwsh
        run: |
          mkdir dists/32bit
          cd dists/32bit
          Copy-Item ../../eldstar_client ./client -Recurse
          Copy-Item '../../eldstar_server/dists/Release - Win32/Release' ./server -Recurse
          Copy-Item ../../README.md ./README.md
          cd ../..

          Compress-Archive -Path "dists/32bit/*" -DestinationPath "Eldstar_${env:GITHUB_SHA}_Win32.zip"
          echo "Compressed 32-bit distribution into Eldstar_${env:GITHUB_SHA}_Win32.zip"

      - name: Upload 32-bit release
        uses: actions/upload-artifact@v2-preview
        with:
          name: Eldstar_${{ github.sha }}_Win32
          path: Eldstar_${{ github.sha }}_Win32.zip

      - name: Package 64-bit distribution
        shell: pwsh
        run: |
          mkdir dists/64bit
          cd dists/64bit
          Copy-Item ../../eldstar_client ./client -Recurse
          Copy-Item '../../eldstar_server/dists/Release - x64/Release' ./server -Recurse
          Copy-Item ../../README.md ./README.md
          cd ../..

          Compress-Archive -Path "dists/64bit/*" -DestinationPath "Eldstar_${env:GITHUB_SHA}_Win64.zip"
          echo "Compressed 64-bit distribution into Eldstar_${env:GITHUB_SHA}_Win64.zip"

      - name: Upload 64-bit release
        uses: actions/upload-artifact@v2-preview
        with:
          name: Eldstar_${{ github.sha }}_Win64
          path: Eldstar_${{ github.sha }}_Win64.zip

      - name: Get tag name
        id: get_version
        if: startsWith(github.ref, 'refs/tags/')
        shell: bash
        run: echo ::set-output name=VERSION::${GITHUB_REF#refs/tags/}

      - name: Create release
        id: create_release
        if: startsWith(github.ref, 'refs/tags/')
        uses: actions/create-release@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.get_version.outputs.VERSION }}
          release_name: ${{ steps.get_version.outputs.VERSION }}
          body: |
            Release binaries for Eldstar ${{ steps.get_version.outputs.VERSION }}.

            I recommend reading the wiki for information on how to use Eldstar:
            https://github.com/pm-reverse-engineering/eldstar/wiki

            The 'source code' links are automatically generated by GitHub and do not contain the Eldstar binaries. Please download the Win32 or Win64 zip files if you wish to run Eldstar.
          draft: false
          prerelease: false

      - name: Upload 32-bit release asset
        if: startsWith(github.ref, 'refs/tags/')
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: Eldstar_${{ github.sha }}_Win32.zip
          asset_name: Eldstar_${{ steps.get_version.outputs.VERSION }}_Win32.zip
          asset_content_type: application/zip

      - name: Upload 64-bit release asset
        if: startsWith(github.ref, 'refs/tags/')
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: Eldstar_${{ github.sha }}_Win64.zip
          asset_name: Eldstar_${{ steps.get_version.outputs.VERSION }}_Win64.zip
          asset_content_type: application/zip
